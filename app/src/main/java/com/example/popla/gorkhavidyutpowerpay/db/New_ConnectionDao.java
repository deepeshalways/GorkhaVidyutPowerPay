package com.example.popla.gorkhavidyutpowerpay.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEW__CONNECTION".
*/
public class New_ConnectionDao extends AbstractDao<New_Connection, Long> {

    public static final String TABLENAME = "NEW__CONNECTION";

    /**
     * Properties of entity New_Connection.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Application_id = new Property(0, Long.class, "application_id", true, "APPLICATION_ID");
        public final static Property Applicant_name = new Property(1, String.class, "applicant_name", false, "APPLICANT_NAME");
        public final static Property Applicant_fname = new Property(2, String.class, "applicant_fname", false, "APPLICANT_FNAME");
        public final static Property Applicant_DOB = new Property(3, String.class, "applicant_DOB", false, "APPLICANT__DOB");
        public final static Property Applicant_occupaion = new Property(4, String.class, "applicant_occupaion", false, "APPLICANT_OCCUPAION");
        public final static Property Applicant_area = new Property(5, String.class, "applicant_area", false, "APPLICANT_AREA");
        public final static Property Applicant_landmark = new Property(6, String.class, "applicant_landmark", false, "APPLICANT_LANDMARK");
        public final static Property Applicant_city = new Property(7, String.class, "applicant_city", false, "APPLICANT_CITY");
        public final static Property Applicant_pincode = new Property(8, String.class, "applicant_pincode", false, "APPLICANT_PINCODE");
        public final static Property Applicant_contype = new Property(9, String.class, "applicant_contype", false, "APPLICANT_CONTYPE");
        public final static Property Applicant_Psize = new Property(10, Float.class, "applicant_Psize", false, "APPLICANT__PSIZE");
        public final static Property Applicant_covereda = new Property(11, Float.class, "applicant_covereda", false, "APPLICANT_COVEREDA");
        public final static Property Applicant_reqKV = new Property(12, Float.class, "applicant_reqKV", false, "APPLICANT_REQ_KV");
        public final static Property Applicant_pos = new Property(13, String.class, "applicant_pos", false, "APPLICANT_POS");
        public final static Property Applicant_aadhar = new Property(14, String.class, "applicant_aadhar", false, "APPLICANT_AADHAR");
        public final static Property Submit_date = new Property(15, String.class, "submit_date", false, "SUBMIT_DATE");
        public final static Property K_no = new Property(16, String.class, "k_no", false, "K_NO");
        public final static Property New_Con_Req_S = new Property(17, String.class, "New_Con_Req_S", false, "NEW__CON__REQ__S");
        public final static Property New_Con_LogInBy = new Property(18, String.class, "New_Con_LogInBy", false, "NEW__CON__LOG_IN_BY");
    }


    public New_ConnectionDao(DaoConfig config) {
        super(config);
    }
    
    public New_ConnectionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEW__CONNECTION\" (" + //
                "\"APPLICATION_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: application_id
                "\"APPLICANT_NAME\" TEXT," + // 1: applicant_name
                "\"APPLICANT_FNAME\" TEXT," + // 2: applicant_fname
                "\"APPLICANT__DOB\" TEXT," + // 3: applicant_DOB
                "\"APPLICANT_OCCUPAION\" TEXT," + // 4: applicant_occupaion
                "\"APPLICANT_AREA\" TEXT," + // 5: applicant_area
                "\"APPLICANT_LANDMARK\" TEXT," + // 6: applicant_landmark
                "\"APPLICANT_CITY\" TEXT," + // 7: applicant_city
                "\"APPLICANT_PINCODE\" TEXT," + // 8: applicant_pincode
                "\"APPLICANT_CONTYPE\" TEXT," + // 9: applicant_contype
                "\"APPLICANT__PSIZE\" REAL," + // 10: applicant_Psize
                "\"APPLICANT_COVEREDA\" REAL," + // 11: applicant_covereda
                "\"APPLICANT_REQ_KV\" REAL," + // 12: applicant_reqKV
                "\"APPLICANT_POS\" TEXT," + // 13: applicant_pos
                "\"APPLICANT_AADHAR\" TEXT," + // 14: applicant_aadhar
                "\"SUBMIT_DATE\" TEXT," + // 15: submit_date
                "\"K_NO\" TEXT," + // 16: k_no
                "\"NEW__CON__REQ__S\" TEXT," + // 17: New_Con_Req_S
                "\"NEW__CON__LOG_IN_BY\" TEXT);"); // 18: New_Con_LogInBy
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEW__CONNECTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, New_Connection entity) {
        stmt.clearBindings();
 
        Long application_id = entity.getApplication_id();
        if (application_id != null) {
            stmt.bindLong(1, application_id);
        }
 
        String applicant_name = entity.getApplicant_name();
        if (applicant_name != null) {
            stmt.bindString(2, applicant_name);
        }
 
        String applicant_fname = entity.getApplicant_fname();
        if (applicant_fname != null) {
            stmt.bindString(3, applicant_fname);
        }
 
        String applicant_DOB = entity.getApplicant_DOB();
        if (applicant_DOB != null) {
            stmt.bindString(4, applicant_DOB);
        }
 
        String applicant_occupaion = entity.getApplicant_occupaion();
        if (applicant_occupaion != null) {
            stmt.bindString(5, applicant_occupaion);
        }
 
        String applicant_area = entity.getApplicant_area();
        if (applicant_area != null) {
            stmt.bindString(6, applicant_area);
        }
 
        String applicant_landmark = entity.getApplicant_landmark();
        if (applicant_landmark != null) {
            stmt.bindString(7, applicant_landmark);
        }
 
        String applicant_city = entity.getApplicant_city();
        if (applicant_city != null) {
            stmt.bindString(8, applicant_city);
        }
 
        String applicant_pincode = entity.getApplicant_pincode();
        if (applicant_pincode != null) {
            stmt.bindString(9, applicant_pincode);
        }
 
        String applicant_contype = entity.getApplicant_contype();
        if (applicant_contype != null) {
            stmt.bindString(10, applicant_contype);
        }
 
        Float applicant_Psize = entity.getApplicant_Psize();
        if (applicant_Psize != null) {
            stmt.bindDouble(11, applicant_Psize);
        }
 
        Float applicant_covereda = entity.getApplicant_covereda();
        if (applicant_covereda != null) {
            stmt.bindDouble(12, applicant_covereda);
        }
 
        Float applicant_reqKV = entity.getApplicant_reqKV();
        if (applicant_reqKV != null) {
            stmt.bindDouble(13, applicant_reqKV);
        }
 
        String applicant_pos = entity.getApplicant_pos();
        if (applicant_pos != null) {
            stmt.bindString(14, applicant_pos);
        }
 
        String applicant_aadhar = entity.getApplicant_aadhar();
        if (applicant_aadhar != null) {
            stmt.bindString(15, applicant_aadhar);
        }
 
        String submit_date = entity.getSubmit_date();
        if (submit_date != null) {
            stmt.bindString(16, submit_date);
        }
 
        String k_no = entity.getK_no();
        if (k_no != null) {
            stmt.bindString(17, k_no);
        }
 
        String New_Con_Req_S = entity.getNew_Con_Req_S();
        if (New_Con_Req_S != null) {
            stmt.bindString(18, New_Con_Req_S);
        }
 
        String New_Con_LogInBy = entity.getNew_Con_LogInBy();
        if (New_Con_LogInBy != null) {
            stmt.bindString(19, New_Con_LogInBy);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, New_Connection entity) {
        stmt.clearBindings();
 
        Long application_id = entity.getApplication_id();
        if (application_id != null) {
            stmt.bindLong(1, application_id);
        }
 
        String applicant_name = entity.getApplicant_name();
        if (applicant_name != null) {
            stmt.bindString(2, applicant_name);
        }
 
        String applicant_fname = entity.getApplicant_fname();
        if (applicant_fname != null) {
            stmt.bindString(3, applicant_fname);
        }
 
        String applicant_DOB = entity.getApplicant_DOB();
        if (applicant_DOB != null) {
            stmt.bindString(4, applicant_DOB);
        }
 
        String applicant_occupaion = entity.getApplicant_occupaion();
        if (applicant_occupaion != null) {
            stmt.bindString(5, applicant_occupaion);
        }
 
        String applicant_area = entity.getApplicant_area();
        if (applicant_area != null) {
            stmt.bindString(6, applicant_area);
        }
 
        String applicant_landmark = entity.getApplicant_landmark();
        if (applicant_landmark != null) {
            stmt.bindString(7, applicant_landmark);
        }
 
        String applicant_city = entity.getApplicant_city();
        if (applicant_city != null) {
            stmt.bindString(8, applicant_city);
        }
 
        String applicant_pincode = entity.getApplicant_pincode();
        if (applicant_pincode != null) {
            stmt.bindString(9, applicant_pincode);
        }
 
        String applicant_contype = entity.getApplicant_contype();
        if (applicant_contype != null) {
            stmt.bindString(10, applicant_contype);
        }
 
        Float applicant_Psize = entity.getApplicant_Psize();
        if (applicant_Psize != null) {
            stmt.bindDouble(11, applicant_Psize);
        }
 
        Float applicant_covereda = entity.getApplicant_covereda();
        if (applicant_covereda != null) {
            stmt.bindDouble(12, applicant_covereda);
        }
 
        Float applicant_reqKV = entity.getApplicant_reqKV();
        if (applicant_reqKV != null) {
            stmt.bindDouble(13, applicant_reqKV);
        }
 
        String applicant_pos = entity.getApplicant_pos();
        if (applicant_pos != null) {
            stmt.bindString(14, applicant_pos);
        }
 
        String applicant_aadhar = entity.getApplicant_aadhar();
        if (applicant_aadhar != null) {
            stmt.bindString(15, applicant_aadhar);
        }
 
        String submit_date = entity.getSubmit_date();
        if (submit_date != null) {
            stmt.bindString(16, submit_date);
        }
 
        String k_no = entity.getK_no();
        if (k_no != null) {
            stmt.bindString(17, k_no);
        }
 
        String New_Con_Req_S = entity.getNew_Con_Req_S();
        if (New_Con_Req_S != null) {
            stmt.bindString(18, New_Con_Req_S);
        }
 
        String New_Con_LogInBy = entity.getNew_Con_LogInBy();
        if (New_Con_LogInBy != null) {
            stmt.bindString(19, New_Con_LogInBy);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public New_Connection readEntity(Cursor cursor, int offset) {
        New_Connection entity = new New_Connection( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // application_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // applicant_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // applicant_fname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // applicant_DOB
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // applicant_occupaion
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // applicant_area
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // applicant_landmark
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // applicant_city
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // applicant_pincode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // applicant_contype
            cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10), // applicant_Psize
            cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11), // applicant_covereda
            cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12), // applicant_reqKV
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // applicant_pos
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // applicant_aadhar
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // submit_date
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // k_no
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // New_Con_Req_S
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // New_Con_LogInBy
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, New_Connection entity, int offset) {
        entity.setApplication_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setApplicant_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setApplicant_fname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setApplicant_DOB(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setApplicant_occupaion(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setApplicant_area(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setApplicant_landmark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setApplicant_city(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setApplicant_pincode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setApplicant_contype(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setApplicant_Psize(cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10));
        entity.setApplicant_covereda(cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11));
        entity.setApplicant_reqKV(cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12));
        entity.setApplicant_pos(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setApplicant_aadhar(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSubmit_date(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setK_no(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setNew_Con_Req_S(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setNew_Con_LogInBy(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(New_Connection entity, long rowId) {
        entity.setApplication_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(New_Connection entity) {
        if(entity != null) {
            return entity.getApplication_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(New_Connection entity) {
        return entity.getApplication_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
